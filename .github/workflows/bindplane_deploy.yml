name: BindPlane OP Deploy
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  bindplane:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Gcloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0.4.1'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          BINDPLANE_TF_API_KEY: ${{ secrets.BINDPLANE_API_KEY }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan \
            -var newrelic_license_key=${{ secrets.NEWRELIC_KEY }} \
            -no-color
        continue-on-error: true
        env:
          BINDPLANE_TF_API_KEY: ${{ secrets.BINDPLANE_API_KEY }}

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply \
            -var newrelic_license_key=${{ secrets.NEWRELIC_KEY }} \
            -auto-approve
        env:
          BINDPLANE_TF_API_KEY: ${{ secrets.BINDPLANE_API_KEY }}
